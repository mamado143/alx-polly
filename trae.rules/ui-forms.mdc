---
description: Form conventions: react-hook-form + zod + shadcn/ui for consistent UX.
globs:
  - "components/**"
  - "app/**"
autoAttach: ["**/*form*", "**/*page.tsx"]
---

## Rules
- Use react-hook-form with zodResolver.
- Use shadcn <Form>, <FormField>, <FormItem>, <FormLabel>, <FormControl>, <FormMessage>.
- Submit handler calls a Server Action; avoid client fetch.

## Minimal Example
```tsx
"use client";
import { useTransition } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { createPoll } from "@/lib/actions/create-poll";

const schema = z.object({
  question: z.string().min(10).max(280),
  options: z.array(z.string().min(1).max(80)).min(2).max(10),
});

export function CreatePollForm() {
  const [pending, startTransition] = useTransition();
  const form = useForm<z.infer<typeof schema>>({
    resolver: zodResolver(schema),
    defaultValues: { question: "", options: ["", ""] },
  });

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit((values) =>
          startTransition(async () => { await createPoll(values); })
        )}
        className="space-y-4"
      >
        <FormField control={form.control} name="question" render={({ field }) => (
          <FormItem>
            <FormLabel>Question</FormLabel>
            <FormControl><Textarea {...field} placeholder="What should we build next?" /></FormControl>
            <FormMessage />
          </FormItem>
        )}/>
        {/* Render options inputs here */}
        <Button type="submit" disabled={pending}>{pending ? "Creating..." : "Create Poll"}</Button>
      </form>
    </Form>
  );
}
```
